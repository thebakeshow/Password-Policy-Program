#Jonathan Baker Password Policy
#11/23/21
# import modules
import tkinter
from tkinter import *
from PIL import ImageTk, Image
import os


#Main Screen Code
def main_account_screen():
    global main_screen
    main_screen = Tk()
    main_screen.geometry("600x500")
    main_screen.title("Account Login")

    # Background image

    test = ImageTk.PhotoImage(file=r'C:\Users\Jon\Desktop\unnamed.jpg')

    label1 = tkinter.Label(image=test)
    label1.image = test

    # Position image
    label1.place(x=0, y=0)

###Pack place the buttons to middle of screen
    Label(text="Password Goon", bg="grey", width="300", height="2", font=("Cooper Black", 13)).pack()
    Button(text="Login", height="2", width="30", command=login).pack()
    Button(text="Register", height="2", width="30", command=register).pack()




# Designing window for registration

def register():

    register_screen = Toplevel(main_screen)
    register_screen.title("Register")
    register_screen.geometry("600x500")
    register_screen.configure(bg='grey')






    # user account name
    Label(register_screen, text="* First & Last Name:", bg='gray90', font=("Cooper Black", 10)).place(x=25, y=20)
    firstName = Entry(register_screen, font=("Cooper Black", 13), width=15)
    firstName.place(x=175, y=20)
    lastName = Entry(register_screen, font=("Cooper Black", 13), width=15)
    lastName.place(x=380, y=20)

    # user display name
    Label(register_screen, text="* Display name:", bg='gray90', font=("Cooper Black", 10)).place(x=25, y=50)
    displayName = Entry(register_screen, font=("Cooper Black", 13), width=30)
    displayName.place(x=175, y=50)

    # username
    Label(register_screen, text="* Username:", bg='gray90', font=("Cooper Black", 10)).place(x=25, y=80)
    username = Entry(register_screen, font=("Cooper Black", 13), width=30)
    username.place(x=175, y=80)

    # enter password
    Label(register_screen, text="* Enter password:", bg='gray90', font=("Cooper Black", 10)).place(x=25, y=130)
    password = Entry(register_screen, show='*')
    password.config(font=("Cooper Black", 10), width=15)
    password.place(x=175, y=130)

    # confirm password
    Label(register_screen, text="* Confirm password:", bg='gray90', font=("Cooper Black", 10)).place(x=310, y=130)
    passConfirm = Entry(register_screen, show='*')
    passConfirm.config(font=("Cooper Black", 10), width=15)
    passConfirm.place(x=460, y=130)

    Label(register_screen, text="* Required field", bg='gray90', font=("Cooper Black", 7)).place(x=25, y=175)

    #Requirement & Complexity Display

    Label(register_screen, text="* Required field", bg='gray90', font=("Cooper Black", 7)).place(x=25, y=175)

    #header
    Label(register_screen, text="Passwords must meet these requirements", bg='white', font=("Cooper Black", 8)).place(x=300, y=225, anchor='center')

    #requirements

    lengthReq = Label(register_screen, text="o Must be at least 14 characters in length.", bg='white',font=('Cooper Black', 8))
    lengthReq.place(x=35, y=260)

    upperCase = Label(register_screen, text="o Two uppercase letters [A-Z]", bg='white',font=('Cooper Black', 8))
    upperCase.place(x=35, y=285)

    lowerCase = Label(register_screen, text="o Two lowercase letters [a-z]", bg='white',font=('Cooper Black', 8))
    lowerCase.place(x=35, y=310)

    digits = Label(register_screen, text="o Two digits [0-9]", bg='white',font=('Cooper Black', 8))
    digits.place(x=35, y=335)

    specialCharacters = Label(register_screen, text="o Two special characters only [@#$&*]", bg='white',font=('Cooper Black', 8))
    specialCharacters.place(x=35, y=360)

    diffPassword = Label(register_screen, text="o A new password should differ from the changed password by at least 4 characters.", bg='white',font=('Cooper Black', 8))
    diffPassword.place(x=35, y=410)

    cannotContain = Label(register_screen, text="o A password cannot contain your network account name, username or display name.", bg='white',font=('Cooper Black', 8))
    cannotContain.place(x=35, y=385)

    reusePass = Label(register_screen, text="o Cannot be reused in the last 4 passwords", bg='white', font=('Cooper Black', 8))
    reusePass.place(x=35, y=435)


    # Register button
    register = Button(register_screen, text='Register',command=lambda:register_user(passConfirm,lengthReq,upperCase,lowerCase,digits,specialCharacters,cannotContain,password,username,register_screen,firstName,lastName,displayName))
    register.config(font=('Cooper Black', 8))
    register.place(x=300, y=475, anchor='center')




# Linked list that stores username and password
registerList = {"test" : "xyawdf"}
# stores passwords for username in linked list
SavedPasswords = { }

# Designing window for login

def login():
    login_screen = Toplevel(main_screen)
    login_screen.title("Login")
    login_screen.geometry("600x500")
    login_screen.configure(bg='grey')
    Label(login_screen, text="Please enter details below to login").pack()


#Username Login
    Label(login_screen, text="Username * ", bg='white',font=('Cooper Black', 8)).place(x =95, y=95)
    username = Entry(login_screen, font=('Cooper Black', 8), width=30)
    username.place(x=175, y=95)
#Password Login
    Label(login_screen, text="Password * ", bg='white',font=('Cooper Black', 8)).place(x =95, y=125)
    password = Entry(login_screen, show='*')
    password.place(x=175, y=125)


    Button(login_screen, text='Reset Account', font=('Cooper Black', 8), width = 12,
              command= lambda:register()).place(x=360,y=200, anchor='center')

    # calls sign in function
    Button(login_screen, text='Sign in', font=('Cooper Black', 8), width = 12,
              command= lambda:login_verify(login_screen, username, password)).place(x=210,y=200, anchor='center')

#Verifies username and password from linked list
def login_verify(login_screen, username, password):

    username = username.get()

 #Checks list created for matching username
    if username in registerList:
        pword = password.get()

        if pword in registerList[username]:
            login_sucess(login_screen)
        else:
            Label(login_screen, text=("Invalid Password - please try again"),bg='gray90', font=('Cooper Black', 8, 'bold')).place(x=250, y=180, anchor='center')
    else:
        Label(login_screen, text="Invalid username - please enter valid username or register an account", bg='gray90', font=('Cooper Black', 8, 'bold')).place(x=250, y=190, anchor='center')


# Implementing event on register button
# Designing popup for login success

def login_sucess(login_screen):
    global login_success_screen
    login_success_screen = Toplevel(login_screen)
    login_success_screen.title("Success")
    login_success_screen.geometry("150x100")
    Label(login_success_screen, text="Login Success").pack()

#Carrying over each variable to the function in order to monitor requirements

def register_user(passConfirm,lengthReq,upperCase,lowerCase,digits,specialCharacters,cannotContain,password,username,register_screen,firstName,lastName,displayName):

    #Defining variables from register page
    pword = password.get()
    confirmPassword = passConfirm.get()
    firstName = firstName.get()
    lastName = lastName.get()
    displayName = displayName.get()
    username = username.get()

    #Checks
    # password and confirmation password match
    if pword == confirmPassword:
        # Initially sets valid password to true. If any case fails, valid password is automatically false.
        validPassword = True

        # redirection from "reset password"
        if username in SavedPasswords:
            # deletes oldest password of 4 iterations ago
            if len(SavedPasswords[username]) == 4:
                del SavedPasswords[username][0]

        # tests password length
        if len(pword) >= 14:
            lengthReq.config(fg='green')

        else:
            lengthReq.config(fg='red')

            validPassword = False

        # tests for 2 uppercase
        if re.search("[A-Z].*[A-Z]", pword):
            upperCase.config(fg='green')

        else:
            upperCase.config(fg='red')

            validPassword = False

        # tests for 2 lowercase
        if re.search("[a-z].*[a-z]", pword):
            lowerCase.config(fg='green')

        else:
            lowerCase.config(fg='red')

            validPassword = False

        # tests for 2 numbers
        if re.search("[0-9].*[0-9]", pword):
            digits.config(fg='green')

        else:
            digits.config(fg='red')

            validPassword = False

        # tests for special character
        if re.search("[@#$&*].*[@#$&*]", pword):
            specialCharacters.config(fg='green')

        else:
            specialCharacters.config(fg='red')

            validPassword = False

        # tests for account name, username, or display name
        if re.search(firstName.lower(), pword.lower()) or re.search(lastName.lower(), pword.lower()) or \
                re.search(displayName.lower(), pword.lower()) or re.search(username.lower(), pword.lower()):

            cannotContain.config(fg='red')

            validPassword = False
        else:
            cannotContain.config(fg='green')


        # redirection from reset password
        if username in registerList:

            # tests for new password for changed characters
            oldPassword = cannotContain[username]
            char_count = 0
            for i in range(0, len(pword)):
                if oldPassword[i] == pword[i]:
                    char_count = char_count + 1
                    i = i + 1
            if char_count > 4:
                Label(register_screen, text="New passwords must differ by at least 4 characters", bg='gray90',font=('Cooper Black', 8, 'bold')).place(x=300, y=250, anchor='center')
                validPassword = False

            # tests for repeating password
            if pword in SavedPasswords[username]:
                Label(register_screen, text="New passwords cannot repeat for 4 iterations", bg='gray90',font=('Cooper Black', 8, 'bold')).place(x=300, y=250, anchor='center')
                validPassword = False

        # valid password entered, password is saved to username
        if validPassword:
            registerList[username] = pword
            SavedPasswords.setdefault(username, []).append(pword)
            Label(register_screen, text="Valid Password: Password saved", bg='gray90', font=('Cooper Black', 8, 'bold')).place(x=300, y=250, anchor='center')

            # Displays current and saved passwords for demo
            print("Current username : password creditals:     " + str(registerList))
            print("Every saved username : every password:     " + str(SavedPasswords))

    # passwordS do not match, display error message
    else:
        Label(register_screen, text="Passwords do not match", bg='gray90', font=('Cooper Black', 8, 'bold')).place(x=300, y=250,anchor='center')

main_account_screen()
main_screen.mainloop()
